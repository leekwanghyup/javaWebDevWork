# DB 커넥션풀 

## 도입
	커넥션풀이란 DB커넥션 객체를 여러개 생성 후 풀(Pool)에 담아두고 꺼내 쓰는 방식이다. 
	사용이 끝난 커넥션 객체는 다른 작업에서 다시 사용할 수 있게 풀에 반환해야한다. 
	
	싱글커넥션 사용의 문제점
		DAO1, DAO2, DAO3이 동일한 Connection 객체를 사용한다고 가정하자. 
		DAO3이 작업을 수행하다가 예외가 발생하면 커넥션 객체의 롤백(RollBack) 기능을 호출한다. 
		그런데 문제는 DAO1,DAO2도 동일한 커넥션을 사용하므로 이 DAO들이 작업한 내용까지 롤백(RollBack)해버린다.  
		따라서 웹 브라우저의 요청을 처리할 때 각 요청에 대해 개별의 커넥션 객체를 사용해야한다.
		
		그런데 SQL문 작업을 수행할 때 마다 DB커넥션을 새로 생성한다면 실행속도가 느려지고 많은 가비지가 생성된다. 
		데이터베이스는 커넥션 객체를 생성할 때마다 사용자 인증과 권한 검사를 수행하고 요청 처리를 위한 준비작업을 해야하기 때문이다. 
			
## 1. DB 커넥션풀 
		이런 문제를 해결하기 위해 등장한 것이 DB커넥션 풀이다. 
		DB 커넥션풀을 이용하면 요청에 대해 별도의 커넥션 객체를 사용한다. 
		또한 사용한 커넥션 객체는 소멸되는 것이 아니라 커넥션풀에 반납되어 재사용되므로 가비지가 생성되지 않는다. 
	
## 2. DB 커넥션풀 만들기
	- spms.util.DBConnectionPool
	 
## 3. MemberDao에 DB커넥션풀 적용
	- Connection 객체 필드와 세터 삭제 
	- DbConnectionPool 객체 선언 및 세터 메서드 추가 
	- MemberDao의 모든 메서드에 커넥션 객체를 얻는 코드 추가 

## 4. ContextLoaderListener에서 DB커넥션풀 생성 및 DAO에 주입
	- contextInitalized()
		 커넥션객체를 얻는 코드 삭제 
		 DBConnectionPool객체 생성 후 초기화 파라미터 주입 
		 MemberDao에 Connection 객체를 주입하는 코드 삭제 
		 MemberDaodp DBConnectionPool 객체 주입
	- contextDestoryed
		conn.close()삭제 
		커넥션풀객체의 closeAll() 호출